public class Node {
    int data;
    Node next = null;

    Node(int data) {
        this.data = data;

    }
}
    class LinkedList {
        Node head = null;
        
        //addFirst
        
        void addFirst(int data){
            Node newNode = new Node(data);
            if(head==null){
                head=newNode;
            }else {
                newNode.next=head;
                head=newNode;
            }
        }
        void addLast(int data){
            Node newNOde = new Node(data);
            if(head==null){
                head = newNOde;
            }
            else{
                Node temp = head;
                while(temp.next!=null){
                    temp=temp.next;
                }
                temp.next=newNOde;
            }
            
        }
        //CountNode
        int CountNode(){
            Node temp =head;
            int count =0;
            while (temp!=null){
                count++;
                temp = temp.next;
            }
            return count;
        }
        //delAtPos
        void addAtPos(int Pos,int data){
            if(Pos<=0||Pos>=CountNode()+2){
                System.out.println("Wrong input");
                return;
            }
            if(Pos==1){
                addFirst(data);
            } else if (Pos==CountNode()+1) {
                addLast(data);
                
            }else {
                Node newNode = new Node(data);
                Node temp =head;
                while (Pos-2!=0){
                    temp = temp.next;
                    Pos--;
                }
                newNode.next=temp.next;
                temp.next=newNode;
            }

        }
        //delFirst
        
        void delFirst(){
            if(head==null){
                System.out.println("Empty LinkList");
                return;
            }
            if(CountNode()==1){
                head = null;
            }else {
                head=head.next;
            }
            
        }
        //delLast
        
        void delLast(){
            if(head==null){
                System.out.println("Empty LinkedList");
                return;
            }
            if(CountNode()==1){
                head=null;
            }else{
                Node temp =head;
                while (temp.next.next!=null){
                    temp=temp.next;
                }
                temp.next = null;
            }
            
        }
        // delAtPos
        
        void delAtPos(int Pos){
            if(Pos<=0||Pos>=CountNode()+1){
                System.out.println("Wrong Input");
                return;
            }
            if(Pos==1){
                delFirst();
            } else if (Pos==CountNode()) {
                delLast();

            }else {
                Node temp = head;
                while (Pos-2!=0){
                    temp = temp.next;
                    Pos--;
                }
                temp.next=temp.next.next;
            }
            
        }
        //PrintSLL

        void PrintSLL() {
            if (head == null) {
                System.out.println("Empty LinkedList");
            } else {
                Node temp = head;
                while (temp.next != null) {
                    System.out.println(temp.data + "->");
                    temp = temp.next;
                }
                System.out.println(temp.data);
            }
        }
    class Client {
        public static void main(String[] args) {
            LinkedList ll = new LinkedList();
            
            ll.addFirst(10);
            ll.addFirst(20);
            ll.addFirst(30);
            ll.PrintSLL();
            
            ll.addLast(15);
            ll.PrintSLL();
            
            ll.addAtPos(5,25);
            ll.PrintSLL();
            
            ll.delFirst();
            ll.PrintSLL();
            
            ll.delLast();
            ll.PrintSLL();
            
            ll.delAtPos(2);
            ll.PrintSLL();
            


        }
    }
}
